{
  // Place your snippets for typescriptreact here. Each snippet is defined under a snippet name and has a prefix, body and 
  // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
  // same ids are connected.
  // Example:
  // "Print to console": {
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }

  // React Native Components
  "React Native Functional Component": {
    "prefix": "rnfc",
    "body": [
      "import React from 'react';",
      "import { View, Text, StyleSheet } from 'react-native';",
      "",
      "interface ${1:ComponentName}Props {",
      "  // Props here",
      "}",
      "",
      "const ${1:ComponentName}: React.FC<${1:ComponentName}Props> = ({}) => {",
      "  return (",
      "    <View style={styles.container}>",
      "      <Text>${1:ComponentName}</Text>",
      "    </View>"
      "  );",
      "};",
      "",
      "const styles = StyleSheet.create({",
      "  container: {",
      "    flex: 1,",
      "    justifyContent: 'center',",
      "    alignItems: 'center',",
      "  },",
      "});",
      "",
      "export default ${1:ComponentName};",
      ""
    ],
    "description": "Create a new React Native functional component with TypeScript"
  },

  "React Native Screen Component": {
    "prefix": "rnsc",
    "body": [
      "import React from 'react';",
      "import { View, StyleSheet, SafeAreaView, ScrollView } from 'react-native';",
      "",
      "interface ${1:ScreenName}ScreenProps {",
      "  // Props here",
      "}",
      "",
      "const ${1:ScreenName}Screen: React.FC<${1:ScreenName}ScreenProps> = ({}) => {",
      "  return (",
      "    <SafeAreaView style={styles.safeArea}>",
      "      <ScrollView ",
      "        contentContainerStyle={styles.scrollView}",
      "        showsVerticalScrollIndicator={false}",
      "      >",
      "        <View style={styles.container}>",
      "          {/* Your content here */}",
      "        </View>",
      "      </ScrollView>"
      "    </SafeAreaView>"
      "  );",
      "};",
      "",
      "const styles = StyleSheet.create({",
      "  safeArea: {",
      "    flex: 1,",
      "    backgroundColor: '#fff',",
      "  },",
      "  scrollView: {",
      "    flexGrow: 1,",
      "    padding: 16,",
      "  },",
      "  container: {",
      "    flex: 1,",
      "  },",
      "});",
      "",
      "export default ${1:ScreenName}Screen;"
    ],
    "description": "Create a new React Native screen component with TypeScript"
  },

  "React Native Context": {
    "prefix": "rncontext",
    "body": [
      "import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';",
      "",
      "interface ${1:ContextName}ContextData {",
      "  // Your context data here",
      "}",
      "",
      "interface ${1:ContextName}ProviderProps {",
      "  children: ReactNode;",
      "}",
      "",
      "const ${1:ContextName}Context = createContext<${1:ContextName}ContextData>({} as ${1:ContextName}ContextData);",
      "",
      "export const ${1:ContextName}Provider: React.FC<${1:ContextName}ProviderProps> = ({ children }) => {",
      "  // Your state and functions here",
      "  ",
      "  const contextValue: ${1:ContextName}ContextData = {",
      "    // Your context values here",
      "  };",
      "",
      "  return (",
      "    <${1:ContextName}Context.Provider value={contextValue}>",
      "      {children}",
      "    </${1:ContextName}Context.Provider>"
      "  );",
      "};",
      "",
      "export const use${1:ContextName} = (): ${1:ContextName}ContextData => {",
      "  const context = useContext(${1:ContextName}Context);",
      "  ",
      "  if (!context) {",
      "    throw new Error('use${1:ContextName} must be used within a ${1:ContextName}Provider');",
      "  }",
      "  ",
      "  return context;",
      "};",
      ""
    ],
    "description": "Create a new React Context with TypeScript"
  },

  "React Native Custom Hook": {
    "prefix": "rnhook",
    "body": [
      "import { useState, useEffect } from 'react';",
      "",
      "interface Use${1:HookName}Props {",
      "  // Props here",
      "}",
      "",
      "export const use${1:HookName} = ({}: Use${1:HookName}Props = {}) => {",
      "  const [state, setState] = useState<any>(null);",
      "",
      "  useEffect(() => {",
      "    // Your effect here",
      "    ",
      "    return () => {",
      "      // Cleanup",
      "    };"
      "  }, []);",
      "",
      "  // Return values and functions that will be available to the component",
      "  return {",
      "    state,",
      "    // Add more values/functions as needed",
      "  };",
      "};",
      ""
    ],
    "description": "Create a new custom hook with TypeScript"
  },

  "React Native Styled Component": {
    "prefix": "rnstyled",
    "body": [
      "import styled from 'styled-components/native';",
      "import { ViewProps } from 'react-native';",
      "",
      "interface ${1:StyledComponentName}Props extends ViewProps {",
      "  // Add custom props here if needed",
      "}",
      "",
      "export const ${1:StyledComponentName} = styled.View<${1:StyledComponentName}Props>`\n  /* Your styles here */\n  background-color: #fff;\n  padding: 16px;\n  border-radius: 8px;\n  ${props => props.style}\n`;",
      ""
    ],
    "description": "Create a new styled component with TypeScript"
  },

  "React Native Navigation Screen": {
    "prefix": "rnnscreen",
    "body": [
      "import React from 'react';",
      "import { View, Text, StyleSheet } from 'react-native';",
      "import { StackScreenProps } from '@react-navigation/stack';",
      "",
      "type ${1:ScreenName}ScreenProps = StackScreenProps<RootStackParamList, '${1:ScreenName}'>;",
      "",
      "const ${1:ScreenName}Screen: React.FC<${1:ScreenName}ScreenProps> = ({ route, navigation }) => {",
      "  // Access route params: route.params?.paramName",
  
      "  return (",
      "    <View style={styles.container}>",
      "      <Text>${1:ScreenName} Screen</Text>",
      "    </View>"
      "  );",
      "};",
      "",
      "const styles = StyleSheet.create({",
      "  container: {",
      "    flex: 1,",
      "    justifyContent: 'center',",
      "    alignItems: 'center',",
      "    padding: 16,",
      "  },",
      "});",
      "",
      "export default ${1:ScreenName}Screen;"
    ],
    "description": "Create a new React Navigation screen component with TypeScript"
  },

  "React Native Redux Slice": {
    "prefix": "rnslice",
    "body": [
      "import { createSlice, PayloadAction } from '@reduxjs/toolkit';",
      "",
      "interface ${1:SliceName}State {",
      "  // Your state here",
      "  loading: boolean;",
      "  error: string | null;",
      "  data: any; // Replace with your data type",
      "}",
      "",
      "const initialState: ${1:SliceName}State = {",
      "  loading: false,",
      "  error: null,",
      "  data: null,",
      "};",
      "",
      "const ${2:sliceName}Slice = createSlice({",
      "  name: '${2:sliceName}',",
      "  initialState,",
      "  reducers: {",
      "    // Your reducers here",
      "    fetch${1:SliceName}Request(state) {",
      "      state.loading = true;",
      "      state.error = null;",
      "    },",
      "    fetch${1:SliceName}Success(state, action: PayloadAction<any>) {",
      "      state.loading = false;",
      "      state.data = action.payload;",
      "    },",
      "    fetch${1:SliceName}Failure(state, action: PayloadAction<string>) {",
      "      state.loading = false;",
      "      state.error = action.payload;",
      "    },",
      "    reset${1:SliceName}State() {",
      "      return initialState;",
      "    },",
      "  },",
      "});",
      "",
      "// Export actions",
      "export const { ",
      "  fetch${1:SliceName}Request, ",
      "  fetch${1:SliceName}Success, ",
      "  fetch${1:SliceName}Failure,",
      "  reset${1:SliceName}State ",
      "} = ${2:sliceName}Slice.actions;",
      "",
      "// Export reducer",
      "export default ${2:sliceName}Slice.reducer;",
      "",
      "// Export selectors",
      "export const select${1:SliceName} = (state: RootState) => state.${2:sliceName};",
      ""
    ],
    "description": "Create a new Redux Toolkit slice with TypeScript"
  },

  "React Native API Service": {
    "prefix": "rnapi",
    "body": [
      "import axios, { AxiosResponse, AxiosError } from 'axios';",
      "import Config from 'react-native-config';",
      "",
      "const API_BASE_URL = Config.API_URL || 'https://api.example.com';",
      "",
      "const api = axios.create({",
      "  baseURL: API_BASE_URL,",
      "  timeout: 10000,",
      "  headers: {",
      "    'Content-Type': 'application/json',",
      "    'Accept': 'application/json',",
      "  },",
      "});",
      "",
      "// Request interceptor for adding auth token if exists",
      "api.interceptors.request.use(",
      "  (config) => {",
      "    // Get token from your auth service or storage",
      "    // const token = await getAuthToken();",
      "    // if (token) {",
      "    //   config.headers.Authorization = `Bearer ${token}`;",
      "    // }",
      "    return config;",
      "  },",
      "  (error) => {",
      "    return Promise.reject(error);",
      "  }"
      ");",
      "",
      "// Response interceptor for handling common errors",
      "api.interceptors.response.use(",
      "  (response: AxiosResponse) => {",
      "    return response.data;",
      "  },",
      "  (error: AxiosError) => {",
      "    if (error.response) {",
      "      // The request was made and the server responded with a status code",
      "      // that falls out of the range of 2xx",
      "      console.error('Response error:', error.response.status, error.response.data);",
      "      ",
      "      // Handle specific status codes",
      "      switch (error.response.status) {",
      "        case 401:",
      "          // Handle unauthorized (e.g., redirect to login)",
      "          console.error('Unauthorized access - redirecting to login');",
      "          break;",
      "        case 403:",
      "          console.error('Forbidden access');",
      "          break;",
      "        case 404:",
      "          console.error('Resource not found');",
      "          break;",
      "        case 500:",
      "          console.error('Server error');",
      "          break;",
      "        default:",
      "          console.error('Unhandled error:', error.response.status);",
      "      }",
      "    } else if (error.request) {",
      "      // The request was made but no response was received",
      "      console.error('No response received:', error.request);",
      "    } else {",
      "      // Something happened in setting up the request that triggered an Error",
      "      console.error('Request error:', error.message);",
      "    }",
      "    ",
      "    return Promise.reject(error);",
      "  }"
      ");",
      "",
      "// Example API methods",
      "const ${1:apiName} = {",
      "  // GET request example",
      "  get${2:Resource}: async (id: string): Promise<any> => {",
      "    try {",
      "      const response = await api.get(`/resource/${id}`);",
      "      return response;",
      "    } catch (error) {",
      "      throw error;",
      "    }",
      "  },",
      "  ",
      "  // POST request example",
      "  create${2:Resource}: async (data: any): Promise<any> => {",
      "    try {",
      "      const response = await api.post('/resource', data);",
      "      return response;",
      "    } catch (error) {",
      "      throw error;",
      "    }",
      "  },",
      "  ",
      "  // PUT request example",
      "  update${2:Resource}: async (id: string, data: any): Promise<any> => {",
      "    try {",
      "      const response = await api.put(`/resource/${id}`, data);",
      "      return response;",
      "    } catch (error) {",
      "      throw error;",
      "    }",
      "  },",
      "  ",
      "  // DELETE request example",
      "  delete${2:Resource}: async (id: string): Promise<void> => {",
      "    try {",
      "      await api.delete(`/resource/${id}`);",
      "    } catch (error) {",
      "      throw error;",
      "    }",
      "  },",
      "};",
      "",
      "export default ${1:apiName};",
      ""
    ],
    "description": "Create a new API service with axios and TypeScript"
  },

  "React Native Test File": {
    "prefix": "rntest",
    "body": [
      "import React from 'react';",
      "import { render, fireEvent } from '@testing-library/react-native';",
      "import ${1:ComponentName} from './${1:ComponentName}';",
      "",
      "describe('${1:ComponentName}', () => {",
      "  it('renders correctly', () => {",
      "    const { toJSON } = render(<${1:ComponentName} />);",
      "    expect(toJSON()).toMatchSnapshot();",
      "  });",
      "  ",
      "  it('handles press event', () => {",
      "    const onPressMock = jest.fn();",
      "    const { getByTestId } = render(<${1:ComponentName} onPress={onPressMock} />);",
      "    ",
      "    const button = getByTestId('${2:button-test-id}');",
      "    fireEvent.press(button);",
      "    ",
      "    expect(onPressMock).toHaveBeenCalled();",
      "  });",
      "  ",
      "  // Add more test cases as needed",
      "});"
    ],
    "description": "Create a new test file for a React Native component"
  },

  "React Native StyleSheet": {
    "prefix": "rnstyle",
    "body": [
      "import { StyleSheet } from 'react-native';",
      "import { colors, fonts, metrics } from '@styles';",
      "",
      "const styles = StyleSheet.create({",
      "  container: {",
      "    flex: 1,",
      "    backgroundColor: colors.background,",
      "    padding: metrics.basePadding,",
      "  },",
      "  title: {",
      "    fontSize: fonts.size.xl,",
      "    fontWeight: 'bold',",
      "    color: colors.text.primary,",
      "    marginBottom: metrics.baseMargin,",
      "  },",
      "  content: {",
      "    fontSize: fonts.size.md,",
      "    color: colors.text.secondary,",
      "    lineHeight: 22,",
      "  },",
      "  button: {",
      "    backgroundColor: colors.primary,",
      "    padding: metrics.basePadding,",
      "    borderRadius: metrics.baseRadius,",
      "    alignItems: 'center',",
      "    marginTop: metrics.baseMargin * 2,",
      "  },",
      "  buttonText: {",
      "    color: colors.white,",
      "    fontSize: fonts.size.md,",
      "    fontWeight: '600',",
      "  },",
      "});",
      "",
      "export default styles;"
    ],
    "description": "Create a new StyleSheet for a React Native component"
  }
}
